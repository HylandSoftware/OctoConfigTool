# Suppress: EC102 EC116
; EditorConfig to support per-solution formatting.
; Use the EditorConfig VS add-in to make this work for VS2015 and under.
; http://editorconfig.org/

root = true

[*]
indent_style = tab
indent_size = 4
charset = utf-8-bom
insert_final_newline = true
trim_trailing_whitespace = true
end_of_line = crlf

# Dotnet code style settings:
[*.cs]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# require access modifiers
dotnet_style_require_accessibility_modifiers = always:error

# require explicit member names for anonymous types
dotnet_style_prefer_inferred_anonymous_type_member_names = false:error

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = false:error

# Suggest more modern language features when available
dotnet_style_object_initializer = true:error
dotnet_style_collection_initializer = true:error
dotnet_style_coalesce_expression = true:error
dotnet_style_null_propagation = true:error
dotnet_style_explicit_tuple_names = true:error

# CSharp code style settings:
[*.cs]
# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:error
csharp_style_var_when_type_is_apparent = true:error
csharp_style_var_elsewhere = true:error

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:error
csharp_style_expression_bodied_constructors = false:error
csharp_style_expression_bodied_operators = false:error

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:error
csharp_style_expression_bodied_indexers = true:error
csharp_style_expression_bodied_accessors = true:error

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_inlined_variable_declaration = false:error
csharp_style_throw_expression = true:error
csharp_style_conditional_delegate_call = true:error

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation
csharp_indent_case_contents = true
csharp_indent_switch_labels = true

# Expression preferences
csharp_prefer_simple_default_expression = false:error
csharp_style_deconstructed_variable_declaration = false:error
csharp_style_pattern_local_over_anonymous_function = false:error

# Require Braces
csharp_prefer_braces = true:error

# Spacing
csharp_space_after_cast = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false

# Wrapping Options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# Naming conventions
[*cs]
# Anything public must be Pascal Case
dotnet_naming_rule.public_members_must_be_capitalized.symbols   = public_symbols
dotnet_naming_symbols.public_symbols.applicable_kinds           = class, struct, enum, property, method, field, event, delegate
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public

dotnet_naming_rule.public_members_must_be_capitalized.style    = first_word_upper_case_style
dotnet_naming_style.first_word_upper_case_style.capitalization = pascal_case

dotnet_naming_rule.public_members_must_be_capitalized.severity = error

# Interfaces must start with I
dotnet_naming_rule.interfaces_must_start_with_i.symbols   = interfaces_symbols
dotnet_naming_symbols.interfaces_symbols.applicable_kinds            = interface
dotnet_naming_symbols.interfaces_symbols.applicable_accessibilities  = *

dotnet_naming_rule.interfaces_must_start_with_i.style    = interfaces_must_start_with_i_style
dotnet_naming_style.interfaces_must_start_with_i_style.capitalization = pascal_case
dotnet_naming_style.interfaces_must_start_with_i_style.required_prefix = I

dotnet_naming_rule.interfaces_must_start_with_i.severity = error

# Private variables must be underscored and lowercase
dotnet_naming_rule.private_variables_must_be_underscored.symbols   = private_fields
dotnet_naming_symbols.private_fields.applicable_kinds           = property, field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

dotnet_naming_rule.private_variables_must_be_underscored.style    = private_underscore_camel_case
dotnet_naming_style.private_underscore_camel_case.capitalization = camel_case
dotnet_naming_style.private_underscore_camel_case.required_prefix = _

dotnet_naming_rule.private_variables_must_be_underscored.severity = error

# Private members must be camel case
dotnet_naming_rule.private_members_must_be_lowercase.symbols   = private_members
dotnet_naming_symbols.private_members.applicable_kinds           = method
dotnet_naming_symbols.private_members.applicable_accessibilities = private

dotnet_naming_rule.private_members_must_be_lowercase.style    = private_camel_case
dotnet_naming_style.private_camel_case.capitalization = camel_case

dotnet_naming_rule.private_members_must_be_lowercase.severity = error
